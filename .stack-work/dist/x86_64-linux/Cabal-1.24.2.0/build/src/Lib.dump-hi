
==================== FINAL INTERFACE ====================
2017-07-30 13:18:18.022126 UTC

interface shopping-cart-0.1.0.0-8VW4URIMj1m7h6s5ice7t2:Lib 8002
  interface hash: 7866125df8965f7d791dd5f42681ecea
  ABI hash: 39ce16e50d6c8cacc32024182868ce96
  export-list hash: 91c56fc99bcd2cf80a63be5fe823e80f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.price
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
2d582b2d62872cd3ae2d34d92b8be234
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
97133c045f76c9d2ffb76435e024db81
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
de6de6f58776a5199c82627933071256
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "shopping-cart-0.1.0.0-8VW4URIMj1m7h6s5ice7t2"#) -}
e6335e8d11ed5bf2494480271adeceb7
  $wprice :: GHC.Base.String -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case w of wild {
                   [] -> 0#
                   : ds ds1
                   -> case ds of wild1 { GHC.Types.C# ds2 ->
                      let {
                        $wfail :: GHC.Prim.Void# -> GHC.Prim.Int#
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ (void :: GHC.Prim.Void#)[OneShot] ->
                          case GHC.Base.eqString wild Lib.price3 of wild2 {
                            GHC.Types.False
                            -> case GHC.Base.eqString wild Lib.price2 of wild3 {
                                 GHC.Types.False -> case Lib.price1 ret_ty GHC.Prim.Int# of {}
                                 GHC.Types.True -> 115# }
                            GHC.Types.True -> 80# }
                      } in
                      case ds2 of ds3 {
                        DEFAULT -> $wfail GHC.Prim.void#
                        'A'#
                        -> case ds1 of wild2 {
                             [] -> 50# : ipv ipv1 -> $wfail GHC.Prim.void# } } } }) -}
630be7eaed0e5da0b3d9557c0cb0856b
  price :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Lib.$wprice w of ww { DEFAULT -> GHC.Types.I# ww }) -}
4125c66ae64bbf9d0ddb0ddfe0d16bb8
  price1 :: GHC.Types.Int
  {- Strictness: x -}
d885a9636019ed7dda7bb69543f0f2e4
  price2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CDBA"#) -}
22503963277aad3b0445034a4980ab7d
  price3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AB"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

